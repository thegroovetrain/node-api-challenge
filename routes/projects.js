/* MODEL
{
    id: number, auto generated by database
    name: string, required
    description: string, required
    completed: true or false, not required
}*/

const express = require('express');
const router = express.Router();
const projectModel = require('../data/helpers/projectModel');
const validateProjectId = require('../middleware/validateProjectId');
const validateProject = require('../middleware/validateProject');


router.get('/', (req, res) => {
    try {
        projectModel.get().then(projects => res.status(200).json(projects));
    } catch (err) {
        return res.status(500).json({message: "Error getting projects data"});
    }
});

router.get('/:id', validateProjectId(), (req, res) => {
    res.status(200).json(req.project);
});

router.post('/', validateProject(), (req, res) => {
    try {
        const newProject = {
            name: req.body.name,
            description: req.body.description
        };

        projectModel.insert(newProject).then(project => {
            return res.status(201).json(project);
        });
    } catch (err) {
        return res.status(500).json({message: "Error creating project"});
    }
});

router.put('/:id', validateProjectId(), validateProject(), (req, res) => {
    try {
        const changes = {
            name: req.body.name,
            description: req.body.description,
            completed: req.body.completed ? req.body.completed : req.project.completed
        }
        projectModel.update(req.params.id, changes).then(project => {
            return res.status(200).json(project);
        });
    } catch (err) {
        return res.status(500).json({message: "Error updating project"});
    }
});

router.delete('/:id', validateProjectId(), (req, res) => {
    try {
        projectModel.remove(req.params.id).then(n => {
            return res.status(200).json({removed: n, project: req.project});
        });
    } catch (err) {
        return res.status(500).json({message: "Error deleting project"});
    }
});

module.exports = router;